-- TABLAS

-- Crear tabla Clientes
CREATE TABLE Clientes (
    id_cliente NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    nombre NVARCHAR2(50) NOT NULL,
    apellido NVARCHAR2(50) NOT NULL,
    telefono NVARCHAR2(20) UNIQUE NOT NULL,
    email NVARCHAR2(50) UNIQUE NOT NULL,
    direccion NVARCHAR2(100)
);

-- Crear tabla Proveedores
CREATE TABLE Proveedores (
    id_proveedor NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    nombre NVARCHAR2(50) NOT NULL,
    telefono NVARCHAR2(20) UNIQUE NOT NULL,
    email NVARCHAR2(50) UNIQUE NOT NULL,
    direccion NVARCHAR2(100)
);

-- Crear tabla Categorias
CREATE TABLE Categorias (
    id_categoria NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    nombre NVARCHAR2(50) UNIQUE NOT NULL
);

-- Crear tabla Repuestos
CREATE TABLE Repuestos (
    id_repuesto NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    nombre NVARCHAR2(50) NOT NULL,
    marca NVARCHAR2(50) NOT NULL,
    precio NUMBER(10, 2) NOT NULL,
    stock NUMBER CHECK (stock >= 0),
    id_proveedor NUMBER NOT NULL,
    id_categoria NUMBER NOT NULL,
    FOREIGN KEY (id_proveedor) REFERENCES Proveedores(id_proveedor),
    FOREIGN KEY (id_categoria) REFERENCES Categorias(id_categoria)
);

-- Crear tabla Ventas
CREATE TABLE Ventas (
    id_venta NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    id_cliente NUMBER NOT NULL,
    fecha_venta DATE NOT NULL,
    total_venta NUMBER(10, 2) NOT NULL,
    FOREIGN KEY (id_cliente) REFERENCES Clientes(id_cliente)
);

-- Crear tabla Detalle_Ventas
CREATE TABLE Detalle_Ventas (
    id_detalle NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    id_venta NUMBER NOT NULL,
    id_repuesto NUMBER NOT NULL,
    cantidad NUMBER CHECK (cantidad > 0),
    precio_unitario NUMBER(10, 2) NOT NULL,
    subtotal NUMBER(10, 2) GENERATED ALWAYS AS (cantidad * precio_unitario) VIRTUAL,
    FOREIGN KEY (id_venta) REFERENCES Ventas(id_venta),
    FOREIGN KEY (id_repuesto) REFERENCES Repuestos(id_repuesto)
);

-- Crear tabla Orden_Compra
CREATE TABLE Orden_Compra (
    id_orden NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    id_proveedor NUMBER NOT NULL,
    fecha_orden DATE NOT NULL,
    estado_orden NVARCHAR2(20) NOT NULL CHECK (estado_orden IN ('Pendiente', 'Completada', 'Cancelada')),
    FOREIGN KEY (id_proveedor) REFERENCES Proveedores(id_proveedor)
);

-- Crear tabla Detalle_Ordenes
CREATE TABLE Detalle_Ordenes (
    id_detalle_orden NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    id_orden NUMBER NOT NULL,
    id_repuesto NUMBER NOT NULL,
    cantidad NUMBER CHECK (cantidad > 0),
    precio_unitario NUMBER(10, 2) NOT NULL,
    subtotal NUMBER(10, 2) GENERATED ALWAYS AS (cantidad * precio_unitario) VIRTUAL,
    FOREIGN KEY (id_orden) REFERENCES Orden_Compra(id_orden),
    FOREIGN KEY (id_repuesto) REFERENCES Repuestos(id_repuesto)
);

-- INSERTS

INSERT INTO Clientes (id_cliente, nombre, apellido, telefono, email, direccion) VALUES (1, 'Juan', 'Perez', '1234567890', 'juan.perez@example.com', 'San Jose');
INSERT INTO Clientes (id_cliente, nombre, apellido, telefono, email, direccion) VALUES (2, 'Ana', 'Rodriguez', '9876543210', 'ana.rodriguez@example.com', 'Alajuela');
INSERT INTO Clientes (id_cliente, nombre, apellido, telefono, email, direccion) VALUES (3, 'Carlos', 'Jimenez', '8523697410', 'carlos.jimenez@example.com', 'Cartago');
INSERT INTO Clientes (id_cliente, nombre, apellido, telefono, email, direccion) VALUES (4, 'Maria', 'Lopez', '7894561230', 'maria.lopez@example.com', 'Heredia');
INSERT INTO Clientes (id_cliente, nombre, apellido, telefono, email, direccion) VALUES (5, 'Sofia', 'Gonzalez', '4561237890', 'sofia.gonzalez@example.com', 'Puntarenas');
INSERT INTO Clientes (id_cliente, nombre, apellido, telefono, email, direccion) VALUES (6, 'Pedro', 'Ramirez', '7418529630', 'pedro.ramirez@example.com', 'Limon');
INSERT INTO Clientes (id_cliente, nombre, apellido, telefono, email, direccion) VALUES (7, 'Laura', 'Castro', '3692581470', 'laura.castro@example.com', 'San Jose');
INSERT INTO Clientes (id_cliente, nombre, apellido, telefono, email, direccion) VALUES (8, 'Luis', 'Vargas', '9517538520', 'luis.vargas@example.com', 'Cartago');
INSERT INTO Clientes (id_cliente, nombre, apellido, telefono, email, direccion) VALUES (9, 'Gabriela', 'Araya', '7539518520', 'gabriela.araya@example.com', 'Alajuela');
INSERT INTO Clientes (id_cliente, nombre, apellido, telefono, email, direccion) VALUES (10, 'Diego', 'Monge', '1597532580', 'diego.monge@example.com', 'Heredia');
INSERT INTO Clientes (id_cliente, nombre, apellido, telefono, email, direccion) VALUES (11, 'Elena', 'Mora', '7897891230', 'elena.mora@example.com', 'San Jose');
INSERT INTO Clientes (id_cliente, nombre, apellido, telefono, email, direccion) VALUES (12, 'Ricardo', 'Solano', '8889997777', 'ricardo.solano@example.com', 'Alajuela');
INSERT INTO Clientes (id_cliente, nombre, apellido, telefono, email, direccion) VALUES (13, 'Paola', 'Martinez', '1239874560', 'paola.martinez@example.com', 'Cartago');
INSERT INTO Clientes (id_cliente, nombre, apellido, telefono, email, direccion) VALUES (14, 'Sebastian', 'Lopez', '1593574860', 'sebastian.lopez@example.com', 'Heredia');
INSERT INTO Clientes (id_cliente, nombre, apellido, telefono, email, direccion) VALUES (15, 'Camila', 'Venegas', '9638527410', 'camila.venegas@example.com', 'Puntarenas');
INSERT INTO Clientes (id_cliente, nombre, apellido, telefono, email, direccion) VALUES (16, 'Fernando', 'Mendez', '7532581590', 'fernando.mendez@example.com', 'Limon');
INSERT INTO Clientes (id_cliente, nombre, apellido, telefono, email, direccion) VALUES (17, 'Valeria', 'Soto', '8521479630', 'valeria.soto@example.com', 'San Jose');
INSERT INTO Clientes (id_cliente, nombre, apellido, telefono, email, direccion) VALUES (18, 'Oscar', 'Cordoba', '7413692580', 'oscar.cordoba@example.com', 'Cartago');
INSERT INTO Clientes (id_cliente, nombre, apellido, telefono, email, direccion) VALUES (19, 'Adriana', 'Ramirez', '9511597530', 'adriana.ramirez@example.com', 'Alajuela');
INSERT INTO Clientes (id_cliente, nombre, apellido, telefono, email, direccion) VALUES (20, 'Rodrigo', 'Zamora', '9873214560', 'rodrigo.zamora@example.com', 'Heredia');
INSERT INTO Clientes (id_cliente, nombre, apellido, telefono, email, direccion) VALUES (21, 'Monica', 'Gomez', '3571594860', 'monica.gomez@example.com', 'Puntarenas');
INSERT INTO Clientes (id_cliente, nombre, apellido, telefono, email, direccion) VALUES (22, 'Alejandro', 'Chaves', '9517533570', 'alejandro.chaves@example.com', 'Limon');
INSERT INTO Clientes (id_cliente, nombre, apellido, telefono, email, direccion) VALUES (23, 'Daniela', 'Campos', '7531599510', 'daniela.campos@example.com', 'San Jose');
INSERT INTO Clientes (id_cliente, nombre, apellido, telefono, email, direccion) VALUES (24, 'Jose', 'Esquivel', '8523699510', 'jose.esquivel@example.com', 'Cartago');
INSERT INTO Clientes (id_cliente, nombre, apellido, telefono, email, direccion) VALUES (25, 'Clara', 'Sandoval', '4569517530', 'clara.sandoval@example.com', 'Alajuela');
INSERT INTO Clientes (id_cliente, nombre, apellido, telefono, email, direccion) VALUES (26, 'Esteban', 'Carvajal', '9633579510', 'esteban.carvajal@example.com', 'Heredia');
INSERT INTO Clientes (id_cliente, nombre, apellido, telefono, email, direccion) VALUES (27, 'Diana', 'Castillo', '1594568520', 'diana.castillo@example.com', 'Puntarenas');
INSERT INTO Clientes (id_cliente, nombre, apellido, telefono, email, direccion) VALUES (28, 'Alvaro', 'Murillo', '7531594560', 'alvaro.murillo@example.com', 'Limon');
INSERT INTO Clientes (id_cliente, nombre, apellido, telefono, email, direccion) VALUES (29, 'Lucia', 'Vega', '9518529630', 'lucia.vega@example.com', 'San Jose');
INSERT INTO Clientes (id_cliente, nombre, apellido, telefono, email, direccion) VALUES (30, 'Diego', 'Fernandez', '9631478520', 'diego.fernandez@example.com', 'Cartago');

INSERT INTO Proveedores (id_proveedor, nombre, telefono, email, direccion) VALUES (1, 'AutoRepuestos', '21000000', 'contacto@autorepuestos.com', 'San Jose');
INSERT INTO Proveedores (id_proveedor, nombre, telefono, email, direccion) VALUES (2, 'MotoPartes', '21000001', 'ventas@motopartes.com', 'Cartago');
INSERT INTO Proveedores (id_proveedor, nombre, telefono, email, direccion) VALUES (3, 'Repuestera Tica', '21000002', 'info@repuesteratica.com', 'Alajuela');
INSERT INTO Proveedores (id_proveedor, nombre, telefono, email, direccion) VALUES (4, 'Mecanica Global', '21000003', 'ventas@mecanicaglobal.com', 'Heredia');
INSERT INTO Proveedores (id_proveedor, nombre, telefono, email, direccion) VALUES (5, 'TurboRep', '21000004', 'servicio@turborep.com', 'Limon');
INSERT INTO Proveedores (id_proveedor, nombre, telefono, email, direccion) VALUES (6, 'Repuestos del Caribe', '21000005', 'caribe@repuestos.com', 'Limon');
INSERT INTO Proveedores (id_proveedor, nombre, telefono, email, direccion) VALUES (7, 'MotorTech', '21000006', 'info@motortech.com', 'San Jose');
INSERT INTO Proveedores (id_proveedor, nombre, telefono, email, direccion) VALUES (8, 'Partes Express', '21000007', 'contacto@partesexpress.com', 'Cartago');
INSERT INTO Proveedores (id_proveedor, nombre, telefono, email, direccion) VALUES (9, 'Repuestos del Pacifico', '21000008', 'ventas@pacificorepuestos.com', 'Puntarenas');
INSERT INTO Proveedores (id_proveedor, nombre, telefono, email, direccion) VALUES (10, 'Equipos y Partes', '21000009', 'equipos@partes.com', 'Alajuela');

INSERT INTO Categorias (id_categoria, nombre) VALUES (1, 'Frenos');
INSERT INTO Categorias (id_categoria, nombre) VALUES (2, 'Motor');
INSERT INTO Categorias (id_categoria, nombre) VALUES (3, 'Suspensión');
INSERT INTO Categorias (id_categoria, nombre) VALUES (4, 'Transmisión');
INSERT INTO Categorias (id_categoria, nombre) VALUES (5, 'Baterias');
INSERT INTO Categorias (id_categoria, nombre) VALUES (6, 'Aceites');
INSERT INTO Categorias (id_categoria, nombre) VALUES (7, 'Carroceria');
INSERT INTO Categorias (id_categoria, nombre) VALUES (8, 'Accesorios');
INSERT INTO Categorias (id_categoria, nombre) VALUES (9, 'Iluminacion');
INSERT INTO Categorias (id_categoria, nombre) VALUES (10, 'Filtros');

INSERT INTO Repuestos (id_repuesto, nombre, marca, precio, stock, id_proveedor, id_categoria) VALUES (1, 'Disco de Freno', 'Brembo', 150.00, 20, 1, 1);
INSERT INTO Repuestos (id_repuesto, nombre, marca, precio, stock, id_proveedor, id_categoria) VALUES (2, 'Pastillas de Freno', 'Bosch', 50.00, 50, 2, 1);
INSERT INTO Repuestos (id_repuesto, nombre, marca, precio, stock, id_proveedor, id_categoria) VALUES (3, 'Filtro de Aceite', 'Mann', 20.00, 100, 3, 10);
INSERT INTO Repuestos (id_repuesto, nombre, marca, precio, stock, id_proveedor, id_categoria) VALUES (4, 'Aceite 10W40', 'Castrol', 40.00, 75, 6, 6);
INSERT INTO Repuestos (id_repuesto, nombre, marca, precio, stock, id_proveedor, id_categoria) VALUES (5, 'Amortiguador', 'Monroe', 120.00, 30, 4, 3);
INSERT INTO Repuestos (id_repuesto, nombre, marca, precio, stock, id_proveedor, id_categoria) VALUES (6, 'Bateria 12V', 'LTH', 180.00, 25, 5, 5);
INSERT INTO Repuestos (id_repuesto, nombre, marca, precio, stock, id_proveedor, id_categoria) VALUES (7, 'Filtro de Aire', 'K&N', 35.00, 80, 3, 10);
INSERT INTO Repuestos (id_repuesto, nombre, marca, precio, stock, id_proveedor, id_categoria) VALUES (8, 'Kit de Embrague', 'Valeo', 300.00, 15, 2, 4);
INSERT INTO Repuestos (id_repuesto, nombre, marca, precio, stock, id_proveedor, id_categoria) VALUES (9, 'Faros Delanteros', 'Philips', 60.00, 40, 8, 9);
INSERT INTO Repuestos (id_repuesto, nombre, marca, precio, stock, id_proveedor, id_categoria) VALUES (10, 'Retrovisor', 'OEM', 25.00, 60, 7, 7);

INSERT INTO Ventas (id_venta, id_cliente, fecha_venta, total_venta) VALUES (1, 1, TO_DATE('2024-01-10', 'YYYY-MM-DD'), 250.00);
INSERT INTO Ventas (id_venta, id_cliente, fecha_venta, total_venta) VALUES (2, 2, TO_DATE('2024-01-15', 'YYYY-MM-DD'), 100.00);
INSERT INTO Ventas (id_venta, id_cliente, fecha_venta, total_venta) VALUES (3, 3, TO_DATE('2024-01-20', 'YYYY-MM-DD'), 400.00);
INSERT INTO Ventas (id_venta, id_cliente, fecha_venta, total_venta) VALUES (4, 4, TO_DATE('2024-01-25', 'YYYY-MM-DD'), 300.00);
INSERT INTO Ventas (id_venta, id_cliente, fecha_venta, total_venta) VALUES (5, 5, TO_DATE('2024-02-01', 'YYYY-MM-DD'), 150.00);
INSERT INTO Ventas (id_venta, id_cliente, fecha_venta, total_venta) VALUES (6, 6, TO_DATE('2024-02-05', 'YYYY-MM-DD'), 200.00);
INSERT INTO Ventas (id_venta, id_cliente, fecha_venta, total_venta) VALUES (7, 7, TO_DATE('2024-02-10', 'YYYY-MM-DD'), 120.00);
INSERT INTO Ventas (id_venta, id_cliente, fecha_venta, total_venta) VALUES (8, 8, TO_DATE('2024-02-15', 'YYYY-MM-DD'), 350.00);
INSERT INTO Ventas (id_venta, id_cliente, fecha_venta, total_venta) VALUES (9, 9, TO_DATE('2024-02-20', 'YYYY-MM-DD'), 180.00);
INSERT INTO Ventas (id_venta, id_cliente, fecha_venta, total_venta) VALUES (10, 10, TO_DATE('2024-02-25', 'YYYY-MM-DD'), 90.00);

-- PROCEDIMIENTOS ALMACENADOS

-- Registrar Cliente
CREATE OR REPLACE PROCEDURE RegistrarCliente (
    nombre IN NVARCHAR2,
    apellido IN NVARCHAR2,
    telefono IN NVARCHAR2,
    email IN NVARCHAR2,
    direccion IN NVARCHAR2
)
IS
BEGIN
    INSERT INTO Clientes (nombre, apellido, telefono, email, direccion)
    VALUES (nombre, apellido, telefono, email, direccion);
END;
/

-- Actualizar Cliente
CREATE OR REPLACE PROCEDURE ActualizarCliente (
    id_cliente IN NUMBER,
    nombre IN NVARCHAR2,
    apellido IN NVARCHAR2,
    telefono IN NVARCHAR2,
    email IN NVARCHAR2,
    direccion IN NVARCHAR2
)
IS
BEGIN
    UPDATE Clientes
    SET nombre = nombre,
        apellido = apellido,
        telefono = telefono,
        email = email,
        direccion = direccion
    WHERE id_cliente = id_cliente;
END;
/

-- Eliminar Cliente
CREATE OR REPLACE PROCEDURE EliminarCliente (id_cliente IN NUMBER)
IS
BEGIN
    DELETE FROM Clientes WHERE id_cliente = id_cliente;
END;
/

-- Consultar Clientes Frecuentes 
CREATE OR REPLACE PROCEDURE ConsultarClientesFrecuentes
IS
    CURSOR c_clientes IS
        SELECT 
            Clientes.id_cliente, 
            Clientes.nombre, 
            Clientes.apellido, 
            COUNT(*) AS total_compras
        FROM Ventas
        INNER JOIN Clientes ON Ventas.id_cliente = Clientes.id_cliente
        GROUP BY Clientes.id_cliente, Clientes.nombre, Clientes.apellido
        ORDER BY total_compras DESC
        FETCH FIRST 10 ROWS ONLY;
BEGIN
    FOR cliente IN c_clientes LOOP
        DBMS_OUTPUT.PUT_LINE(
            'ID Cliente: ' || cliente.id_cliente || 
            ', Nombre: ' || cliente.nombre || 
            ', Apellido: ' || cliente.apellido || 
            ', Total Compras: ' || cliente.total_compras
        );
    END LOOP;
END;
/

-- Registrar Venta
CREATE OR REPLACE PROCEDURE RegistrarVenta (
    id_cliente IN NUMBER,
    fecha IN DATE,
    total IN NUMBER
)
IS
BEGIN
    INSERT INTO Ventas (id_cliente, fecha_venta, total_venta)
    VALUES (id_cliente, fecha, total);
END;
/

-- Actualizar Inventario por Venta
CREATE OR REPLACE PROCEDURE ActualizarInventarioVenta (
    id_repuesto IN NUMBER,
    cantidad IN NUMBER
)
IS
BEGIN
    UPDATE Repuestos
    SET stock = stock - cantidad
    WHERE id_repuesto = id_repuesto;
END;
/

-- Generar Reporte de Ventas
CREATE OR REPLACE PROCEDURE GenerarReporteVentas (
    fecha_inicio IN DATE,
    fecha_fin IN DATE
)
IS
    CURSOR c_ventas IS
        SELECT id_venta, fecha_venta, total_venta
        FROM Ventas
        WHERE fecha_venta BETWEEN fecha_inicio AND fecha_fin;
BEGIN
    FOR venta IN c_ventas LOOP
        DBMS_OUTPUT.PUT_LINE(
            'ID Venta: ' || venta.id_venta || 
            ', Fecha: ' || TO_CHAR(venta.fecha_venta, 'YYYY-MM-DD') || 
            ', Total: ' || venta.total_venta
        );
    END LOOP;
END;
/

-- Registrar Orden de Compra
CREATE OR REPLACE PROCEDURE RegistrarOrdenCompra (
    id_proveedor IN NUMBER,
    fecha IN DATE,
    estado IN NVARCHAR2
)
IS
BEGIN
    INSERT INTO Orden_Compra (id_proveedor, fecha_orden, estado_orden)
    VALUES (id_proveedor, fecha, estado);
END;
/

-- Actualizar Estado de Orden
CREATE OR REPLACE PROCEDURE ActualizarEstadoOrden (
    id_orden IN NUMBER,
    nuevo_estado IN NVARCHAR2
)
IS
BEGIN
    UPDATE Orden_Compra
    SET estado_orden = nuevo_estado
    WHERE id_orden = id_orden;
END;
/

-- Alerta de Stock Bajo

CREATE TABLE AlertasStock (
    id_alerta NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    id_repuesto NUMBER,
    nombre VARCHAR2(100),
    stock NUMBER,
    fecha_alerta DATE
);

CREATE OR REPLACE PROCEDURE AlertaStockBajo
IS
BEGIN
    INSERT INTO AlertasStock (id_repuesto, nombre, stock, fecha_alerta)
    SELECT id_repuesto, nombre, stock, SYSDATE
    FROM Repuestos
    WHERE stock < 10;
    
END;
/


-- VISTAS

-- VistaClientes
CREATE OR REPLACE VIEW VistaClientes AS
SELECT id_cliente, nombre, apellido, telefono, email, direccion
FROM Clientes;
/

-- VistaRepuestosBajoStock
CREATE OR REPLACE VIEW VistaRepuestosBajoStock AS
SELECT id_repuesto, nombre, stock
FROM Repuestos
WHERE stock < 10;
/

-- VistaVentasPorMes
CREATE OR REPLACE VIEW VistaVentasPorMes AS
SELECT EXTRACT(MONTH FROM fecha_venta) AS Mes, COUNT(*) AS TotalVentas
FROM Ventas
GROUP BY EXTRACT(MONTH FROM fecha_venta);
/

-- VistaOrdenesPendientes
CREATE OR REPLACE VIEW VistaOrdenesPendientes AS
SELECT id_orden, id_proveedor, fecha_orden, estado_orden
FROM Orden_Compra
WHERE estado_orden = 'Pendiente';
/

-- VistaProveedoresActivos
CREATE OR REPLACE VIEW VistaProveedoresActivos AS
SELECT id_proveedor, nombre, telefono, email, direccion
FROM Proveedores
WHERE EXISTS (
    SELECT 1 FROM Orden_Compra WHERE Orden_Compra.id_proveedor = Proveedores.id_proveedor
);
/

-- VistaVentasPorCliente
CREATE OR REPLACE VIEW VistaVentasPorCliente AS
SELECT c.id_cliente, c.nombre, c.apellido, SUM(v.total_venta) AS TotalGastado
FROM Ventas v
INNER JOIN Clientes c ON v.id_cliente = c.id_cliente
GROUP BY c.id_cliente, c.nombre, c.apellido;
/

-- VistaCategoriasMasVendidas
CREATE OR REPLACE VIEW VistaCategoriasMasVendidas AS
SELECT r.id_categoria, COUNT(*) AS TotalVentas
FROM Repuestos r
INNER JOIN Detalle_Ventas dv ON r.id_repuesto = dv.id_repuesto
GROUP BY r.id_categoria;
/

-- VistaProductosPorProveedor
CREATE OR REPLACE VIEW VistaProductosPorProveedor AS
SELECT p.id_proveedor, p.nombre AS Proveedor, r.nombre AS Repuesto
FROM Proveedores p
INNER JOIN Repuestos r ON p.id_proveedor = r.id_proveedor;
/

-- VistaInventarioActual
CREATE OR REPLACE VIEW VistaInventarioActual AS
SELECT id_repuesto, nombre, marca, stock
FROM Repuestos;
/

-- VistaHistorialCompras
CREATE OR REPLACE VIEW VistaHistorialCompras AS
SELECT c.id_cliente, c.nombre, v.fecha_venta, v.total_venta
FROM Clientes c
INNER JOIN Ventas v ON c.id_cliente = v.id_cliente;
/

-- FUNCIONES

-- CalcularSubtotal
CREATE OR REPLACE FUNCTION CalcularSubtotal (
    cantidad IN NUMBER,
    precio IN NUMBER
) RETURN NUMBER IS
BEGIN
    RETURN cantidad * precio;
END;
/

-- CalcularTotalVenta
CREATE OR REPLACE FUNCTION CalcularTotalVenta (
    id_venta IN NUMBER
) RETURN NUMBER IS
    total NUMBER;
BEGIN
    SELECT SUM(cantidad * precio_unitario) INTO total
    FROM Detalle_Ventas
    WHERE id_venta = id_venta;
    RETURN total;
END;
/

-- ObtenerCantidadVendida
CREATE OR REPLACE FUNCTION ObtenerCantidadVendida (
    id_repuesto IN NUMBER
) RETURN NUMBER IS
    total NUMBER;
BEGIN
    SELECT SUM(cantidad) INTO total
    FROM Detalle_Ventas
    WHERE id_repuesto = id_repuesto;
    RETURN total;
END;
/

-- VerificarDisponibilidad
CREATE OR REPLACE FUNCTION VerificarDisponibilidad (
    id_repuesto IN NUMBER
) RETURN NUMBER IS
    disponibilidad NUMBER;
BEGIN
    SELECT CASE
        WHEN stock > 0 THEN 1
        ELSE 0
    END INTO disponibilidad
    FROM Repuestos
    WHERE id_repuesto = id_repuesto;
    RETURN disponibilidad;
END;
/

-- CalcularDescuento
CREATE OR REPLACE FUNCTION CalcularDescuento (
    total IN NUMBER
) RETURN NUMBER IS
BEGIN
    IF total >= 1000 THEN
        RETURN total * 0.1;
    ELSIF total >= 500 THEN
        RETURN total * 0.05;
    ELSE
        RETURN 0;
    END IF;
END;
/

-- ObtenerCategoria
CREATE OR REPLACE FUNCTION ObtenerCategoria (
    id_repuesto IN NUMBER
) RETURN NVARCHAR2 IS
    categoria NVARCHAR2(50);
BEGIN
    SELECT categoria INTO categoria
    FROM Repuestos
    WHERE id_repuesto = id_repuesto;
    RETURN categoria;
END;
/

-- ValidarCliente
CREATE OR REPLACE FUNCTION ValidarCliente (
    id_cliente IN NUMBER
) RETURN NUMBER IS
    valido NUMBER;
BEGIN
    SELECT CASE
        WHEN EXISTS (SELECT 1 FROM Clientes WHERE id_cliente = id_cliente) THEN 1
        ELSE 0
    END INTO valido
    FROM DUAL;
    RETURN valido;
END;
/

-- PromedioVentasMensuales
CREATE OR REPLACE FUNCTION PromedioVentasMensuales (
    mes IN NUMBER
) RETURN NUMBER IS
    promedio NUMBER;
BEGIN
    SELECT AVG(total_venta) INTO promedio
    FROM Ventas
    WHERE EXTRACT(MONTH FROM fecha_venta) = mes;
    RETURN promedio;
END;
/

-- TotalVentasPorPeriodo
CREATE OR REPLACE FUNCTION TotalVentasPorPeriodo (
    fecha_inicio IN DATE,
    fecha_fin IN DATE
) RETURN NUMBER IS
    total NUMBER;
BEGIN
    SELECT SUM(total_venta) INTO total
    FROM Ventas
    WHERE fecha_venta BETWEEN fecha_inicio AND fecha_fin;
    RETURN total;
END;
/

-- EsStockCritico
CREATE OR REPLACE FUNCTION EsStockCritico (
    id_repuesto IN NUMBER
) RETURN NUMBER IS
    critico NUMBER;
BEGIN
    SELECT CASE
        WHEN stock < 10 THEN 1
        ELSE 0
    END INTO critico
    FROM Repuestos
    WHERE id_repuesto = id_repuesto;
    RETURN critico;
END;
/

-- EstadoOrdenCompra
CREATE OR REPLACE FUNCTION EstadoOrdenCompra (
    id_orden IN NUMBER
) RETURN NVARCHAR2 IS
    estado NVARCHAR2(20);
BEGIN
    SELECT estado_orden INTO estado
    FROM Orden_Compra
    WHERE id_orden = id_orden;
    RETURN estado;
END;
/

-- ValidarClienteVenta
CREATE OR REPLACE FUNCTION ValidarClienteVenta (
    id_cliente IN NUMBER,
    id_venta IN NUMBER
) RETURN NUMBER IS
    valido NUMBER;
BEGIN
    SELECT CASE
        WHEN EXISTS (
            SELECT 1
            FROM Ventas
            WHERE id_cliente = id_cliente AND id_venta = id_venta
        ) THEN 1
        ELSE 0
    END INTO valido
    FROM DUAL;
    RETURN valido;
END;
/

-- CalcularComision
CREATE OR REPLACE FUNCTION CalcularComision (
    total IN NUMBER
) RETURN NUMBER IS
BEGIN
    RETURN total * 0.05;
END;
/

-- UltimaFechaVenta
CREATE OR REPLACE FUNCTION UltimaFechaVenta (
    id_cliente IN NUMBER
) RETURN DATE IS
    ultima_fecha DATE;
BEGIN
    SELECT MAX(fecha_venta) INTO ultima_fecha
    FROM Ventas
    WHERE id_cliente = id_cliente;
    RETURN ultima_fecha;
END;
/

-- HistorialOrdenesProveedor 
CREATE OR REPLACE PROCEDURE ConsultarHistorialOrdenesProveedor (
    id_proveedor IN NUMBER
)
IS
BEGIN
    FOR orden IN (
        SELECT id_orden, fecha_orden, estado_orden
        FROM Orden_Compra
        WHERE id_proveedor = id_proveedor
    ) LOOP
        DBMS_OUTPUT.PUT_LINE(
            'ID Orden: ' || orden.id_orden ||
            ', Fecha: ' || orden.fecha_orden ||
            ', Estado: ' || orden.estado_orden
        );
    END LOOP;
END;
/


-- PAQUETES

-- Registrar Cliente
CREATE OR REPLACE PROCEDURE Clientes_Registrar (
    nombre IN NVARCHAR2,
    apellido IN NVARCHAR2,
    telefono IN NVARCHAR2,
    email IN NVARCHAR2,
    direccion IN NVARCHAR2
)
IS
BEGIN
    INSERT INTO Clientes (nombre, apellido, telefono, email, direccion)
    VALUES (nombre, apellido, telefono, email, direccion);
END;
/

-- Actualizar Cliente
CREATE OR REPLACE PROCEDURE Clientes_Actualizar (
    id_cliente IN NUMBER,
    nombre IN NVARCHAR2,
    apellido IN NVARCHAR2,
    telefono IN NVARCHAR2,
    email IN NVARCHAR2,
    direccion IN NVARCHAR2
)
IS
BEGIN
    UPDATE Clientes
    SET nombre = nombre, apellido = apellido, telefono = telefono,
        email = email, direccion = direccion
    WHERE id_cliente = id_cliente;
END;
/

-- Eliminar Cliente
CREATE OR REPLACE PROCEDURE Clientes_Eliminar (
    id_cliente IN NUMBER
)
IS
BEGIN
    DELETE FROM Clientes WHERE id_cliente = id_cliente;
END;
/

-- Registrar Venta
CREATE OR REPLACE PROCEDURE Ventas_Registrar (
    id_cliente IN NUMBER,
    fecha IN DATE,
    total IN NUMBER
)
IS
BEGIN
    INSERT INTO Ventas (id_cliente, fecha_venta, total_venta)
    VALUES (id_cliente, fecha, total);
END;
/

-- Consultar Ventas por Fecha
CREATE OR REPLACE PROCEDURE Ventas_ConsultarPorFecha (
    fecha_inicio IN DATE,
    fecha_fin IN DATE
)
IS
    CURSOR c_ventas IS
        SELECT id_venta, id_cliente, fecha_venta, total_venta
        FROM Ventas
        WHERE fecha_venta BETWEEN fecha_inicio AND fecha_fin;
BEGIN
    FOR venta IN c_ventas LOOP
        DBMS_OUTPUT.PUT_LINE(
            'ID Venta: ' || venta.id_venta || 
            ', ID Cliente: ' || venta.id_cliente || 
            ', Fecha: ' || TO_CHAR(venta.fecha_venta, 'YYYY-MM-DD') || 
            ', Total Venta: ' || venta.total_venta
        );
    END LOOP;
END;
/


-- Actualizar Stock
CREATE OR REPLACE PROCEDURE Inventario_ActualizarStock (
    id_repuesto IN NUMBER,
    cantidad IN NUMBER
)
IS
BEGIN
    UPDATE Repuestos
    SET stock = stock + cantidad
    WHERE id_repuesto = id_repuesto;
END;
/

-- Consultar Stock Bajo 
CREATE OR REPLACE PROCEDURE Inventario_ConsultarStockBajo
IS
    CURSOR c_repuestos IS
        SELECT id_repuesto, nombre, stock
        FROM Repuestos
        WHERE stock < 10;
BEGIN
    FOR repuesto IN c_repuestos LOOP
        DBMS_OUTPUT.PUT_LINE(
            'ID Repuesto: ' || repuesto.id_repuesto || 
            ', Nombre: ' || repuesto.nombre || 
            ', Stock: ' || repuesto.stock
        );
    END LOOP;
END;
/


-- Registrar Proveedor
CREATE OR REPLACE PROCEDURE Proveedores_Registrar (
    nombre IN NVARCHAR2,
    telefono IN NVARCHAR2,
    email IN NVARCHAR2,
    direccion IN NVARCHAR2
)
IS
BEGIN
    INSERT INTO Proveedores (nombre, telefono, email, direccion)
    VALUES (nombre, telefono, email, direccion);
END;
/

-- Consultar Proveedores Activos
CREATE OR REPLACE PROCEDURE Proveedores_ConsultarActivos
IS
    CURSOR c_proveedores IS
        SELECT id_proveedor, nombre, telefono, email, direccion
        FROM Proveedores
        WHERE EXISTS (
            SELECT 1
            FROM Orden_Compra
            WHERE Proveedores.id_proveedor = Orden_Compra.id_proveedor
        );
BEGIN
    FOR proveedor IN c_proveedores LOOP
        DBMS_OUTPUT.PUT_LINE(
            'ID Proveedor: ' || proveedor.id_proveedor ||
            ', Nombre: ' || proveedor.nombre ||
            ', Teléfono: ' || proveedor.telefono ||
            ', Email: ' || proveedor.email ||
            ', Dirección: ' || proveedor.direccion
        );
    END LOOP;
END;
/


-- Registrar Orden de Compra
CREATE OR REPLACE PROCEDURE Ordenes_Registrar (
    id_proveedor IN NUMBER,
    fecha IN DATE,
    estado IN NVARCHAR2
)
IS
BEGIN
    INSERT INTO Orden_Compra (id_proveedor, fecha_orden, estado_orden)
    VALUES (id_proveedor, fecha, estado);
END;
/

-- Actualizar Estado de Orden
CREATE OR REPLACE PROCEDURE Ordenes_ActualizarEstado (
    id_orden IN NUMBER,
    nuevo_estado IN NVARCHAR2
)
IS
BEGIN
    UPDATE Orden_Compra
    SET estado_orden = nuevo_estado
    WHERE id_orden = id_orden;
END;
/

-- Reporte de Ventas por Cliente
CREATE OR REPLACE PROCEDURE Reportes_VentasPorCliente
IS
    CURSOR c_ventas IS
        SELECT c.id_cliente, c.nombre, SUM(v.total_venta) AS TotalGastado
        FROM Ventas v
        INNER JOIN Clientes c ON v.id_cliente = c.id_cliente
        GROUP BY c.id_cliente, c.nombre;
BEGIN
    FOR venta IN c_ventas LOOP
        DBMS_OUTPUT.PUT_LINE(
            'ID Cliente: ' || venta.id_cliente || 
            ', Nombre: ' || venta.nombre || 
            ', Total Gastado: ' || venta.TotalGastado
        );
    END LOOP;
END;
/

-- Reporte de Ventas por Mes 
CREATE OR REPLACE PROCEDURE Reportes_VentasPorMes
IS
    CURSOR c_ventas_mes IS
        SELECT EXTRACT(MONTH FROM fecha_venta) AS Mes, COUNT(*) AS TotalVentas
        FROM Ventas
        GROUP BY EXTRACT(MONTH FROM fecha_venta);
BEGIN
    FOR venta_mes IN c_ventas_mes LOOP
        DBMS_OUTPUT.PUT_LINE(
            'Mes: ' || venta_mes.Mes || ', Total Ventas: ' || venta_mes.TotalVentas
        );
    END LOOP;
END;
/


-- Validar Cliente
CREATE OR REPLACE FUNCTION Seguridad_ValidarCliente (
    id_cliente IN NUMBER
) RETURN NUMBER IS
    valido NUMBER;
BEGIN
    SELECT CASE
        WHEN EXISTS (SELECT 1 FROM Clientes WHERE id_cliente = id_cliente) THEN 1
        ELSE 0
    END INTO valido
    FROM DUAL;
    RETURN valido;
END;
/

-- Validar Stock Critico
CREATE OR REPLACE FUNCTION Seguridad_StockCritico (
    id_repuesto IN NUMBER
) RETURN NUMBER IS
    critico NUMBER;
BEGIN
    SELECT CASE
        WHEN (SELECT stock FROM Repuestos WHERE id_repuesto = id_repuesto) < 10 THEN 1
        ELSE 0
    END INTO critico
    FROM DUAL;
    RETURN critico;
END;
/

-- Obtener Ultima Fecha de Venta
CREATE OR REPLACE FUNCTION Fechas_UltimaVenta (
    id_cliente IN NUMBER
) RETURN DATE IS
    ultima_fecha DATE;
BEGIN
    SELECT MAX(fecha_venta) INTO ultima_fecha
    FROM Ventas
    WHERE id_cliente = id_cliente;
    RETURN ultima_fecha;
END;
/

-- Calcular Promedio de Ventas por Mes
CREATE OR REPLACE FUNCTION Fechas_PromedioVentasMes (
    mes IN NUMBER
) RETURN NUMBER IS
    promedio NUMBER;
BEGIN
    SELECT AVG(total_venta) INTO promedio
    FROM Ventas
    WHERE EXTRACT(MONTH FROM fecha_venta) = mes;
    RETURN promedio;
END;
/

-- Obtener Total de Ventas por Periodo
CREATE OR REPLACE FUNCTION Estadisticas_TotalVentasPeriodo (
    fecha_inicio IN DATE,
    fecha_fin IN DATE
) RETURN NUMBER IS
    total NUMBER;
BEGIN
    SELECT SUM(total_venta) INTO total
    FROM Ventas
    WHERE fecha_venta BETWEEN fecha_inicio AND fecha_fin;
    RETURN total;
END;
/

-- Calcular Cantidad Vendida por Producto
CREATE OR REPLACE FUNCTION Estadisticas_CantidadVendida (
    id_repuesto IN NUMBER
) RETURN NUMBER IS
    cantidad NUMBER;
BEGIN
    SELECT SUM(cantidad) INTO cantidad
    FROM Detalle_Ventas
    WHERE id_repuesto = id_repuesto;
    RETURN cantidad;
END;
/

-- Alerta de Stock Bajo
CREATE OR REPLACE PROCEDURE Alertas_StockBajo
IS
    CURSOR c_repuestos_bajos IS
        SELECT id_repuesto, nombre, stock
        FROM Repuestos
        WHERE stock < 10;
BEGIN
    FOR repuesto IN c_repuestos_bajos LOOP
        -- Procesa los resultados, por ejemplo, imprimiendo una alerta
        DBMS_OUTPUT.PUT_LINE(
            'Repuesto: ' || repuesto.nombre || 
            ' (ID: ' || repuesto.id_repuesto || 
            ') tiene solo ' || repuesto.stock || ' unidades en stock.'
        );
    END LOOP;
END;
/


-- Alerta de Ordenes Pendientes
CREATE OR REPLACE PROCEDURE Alertas_OrdenesPendientes
IS
    CURSOR c_ordenes_pendientes IS
        SELECT id_orden, id_proveedor, estado_orden
        FROM Orden_Compra
        WHERE estado_orden = 'Pendiente';
BEGIN
    FOR orden IN c_ordenes_pendientes LOOP
        -- Imprimir o procesar la alerta
        DBMS_OUTPUT.PUT_LINE(
            'Orden ID: ' || orden.id_orden || 
            ', Proveedor ID: ' || orden.id_proveedor || 
            ', Estado: ' || orden.estado_orden
        );
    END LOOP;
END;
/

-- TRIGGER

-- Trigger para Reducir Inventario
CREATE OR REPLACE TRIGGER ReducirInventario
AFTER INSERT ON Detalle_Ventas
FOR EACH ROW
BEGIN
    UPDATE Repuestos
    SET stock = stock - :NEW.cantidad
    WHERE id_repuesto = :NEW.id_repuesto;
END;
/

-- Trigger para Alerta de Stock Bajo
CREATE OR REPLACE TRIGGER AlertaStockBajo
AFTER UPDATE ON Repuestos
FOR EACH ROW
BEGIN
    IF :NEW.stock < 10 THEN
        DBMS_OUTPUT.PUT_LINE('Alerta: Un repuesto tiene stock bajo.');
    END IF;
END;
/

-- Trigger para Registrar Fecha de Actualización
ALTER TABLE Repuestos ADD ultima_actualizacion DATE;


CREATE OR REPLACE TRIGGER RegistrarFechaActualizacion
BEFORE UPDATE ON Repuestos
FOR EACH ROW
BEGIN
    :NEW.ultima_actualizacion := SYSDATE;
END;
/


-- Trigger para Actualizar Estado de Orden 
ALTER TABLE Detalle_Ordenes ADD estado VARCHAR2(50);

CREATE OR REPLACE TRIGGER ActualizarEstadoOrden
AFTER INSERT OR UPDATE ON Detalle_Ordenes
FOR EACH ROW
DECLARE
    orden_completa NUMBER;
BEGIN
    -- Contar si existen filas con estado distinto de 'Completado'
    SELECT COUNT(*)
    INTO orden_completa
    FROM Detalle_Ordenes
    WHERE id_orden = :NEW.id_orden AND estado != 'Completado';

    -- Si no existen filas pendientes, marcar la orden como completada
    IF orden_completa = 0 THEN
        UPDATE Orden_Compra
        SET estado_orden = 'Completada'
        WHERE id_orden = :NEW.id_orden;
    END IF;
END;
/


-- Trigger para Bloquear Eliminación de Cliente 
CREATE OR REPLACE TRIGGER BloquearEliminacionCliente
BEFORE DELETE ON Clientes
FOR EACH ROW
DECLARE
    ventas_existentes NUMBER;
BEGIN
    -- Contar ventas asociadas al cliente
    SELECT COUNT(*)
    INTO ventas_existentes
    FROM Ventas
    WHERE id_cliente = :OLD.id_cliente;

    -- Si tiene ventas, lanzar una excepción
    IF ventas_existentes > 0 THEN
        RAISE_APPLICATION_ERROR(-20001, 'No se puede eliminar el cliente porque tiene ventas registradas.');
    END IF;
END;
/


-- CURSORES

-- Recorrer lista de clientes
DECLARE
    CURSOR CursorClientes IS
        SELECT id_cliente, nombre, apellido FROM Clientes;
    cliente_reg CursorClientes%ROWTYPE;
BEGIN
    OPEN CursorClientes;
    LOOP
        FETCH CursorClientes INTO cliente_reg;
        EXIT WHEN CursorClientes%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE('ID: ' || cliente_reg.id_cliente || 
                                ', Nombre: ' || cliente_reg.nombre || 
                                ', Apellido: ' || cliente_reg.apellido);
    END LOOP;
    CLOSE CursorClientes;
END;
/

-- Recorrer repuestos con stock bajo
DECLARE
    CURSOR CursorRepuestosBajoStock IS
        SELECT id_repuesto, nombre, stock FROM Repuestos WHERE stock < 10;
    repuesto_reg CursorRepuestosBajoStock%ROWTYPE;
BEGIN
    OPEN CursorRepuestosBajoStock;
    LOOP
        FETCH CursorRepuestosBajoStock INTO repuesto_reg;
        EXIT WHEN CursorRepuestosBajoStock%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE('ID: ' || repuesto_reg.id_repuesto || 
                                ', Nombre: ' || repuesto_reg.nombre || 
                                ', Stock: ' || repuesto_reg.stock);
    END LOOP;
    CLOSE CursorRepuestosBajoStock;
END;
/

-- Recorrer ventas por fecha
DECLARE
    CURSOR CursorVentas IS
        SELECT id_venta, fecha_venta, total_venta 
        FROM Ventas 
        WHERE fecha_venta BETWEEN TO_DATE('2024-01-01', 'YYYY-MM-DD') AND TO_DATE('2024-12-31', 'YYYY-MM-DD');
    venta_reg CursorVentas%ROWTYPE;
BEGIN
    OPEN CursorVentas;
    LOOP
        FETCH CursorVentas INTO venta_reg;
        EXIT WHEN CursorVentas%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE('ID Venta: ' || venta_reg.id_venta || 
                                ', Fecha: ' || TO_CHAR(venta_reg.fecha_venta, 'YYYY-MM-DD') || 
                                ', Total: ' || venta_reg.total_venta);
    END LOOP;
    CLOSE CursorVentas;
END;
/

-- Recorrer Ordenes pendientes
DECLARE
    CURSOR CursorOrdenesPendientes IS
        SELECT id_orden, id_proveedor, estado_orden FROM Orden_Compra WHERE estado_orden = 'Pendiente';
    orden_reg CursorOrdenesPendientes%ROWTYPE;
BEGIN
    OPEN CursorOrdenesPendientes;
    LOOP
        FETCH CursorOrdenesPendientes INTO orden_reg;
        EXIT WHEN CursorOrdenesPendientes%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE('ID Orden: ' || orden_reg.id_orden || 
                                ', Proveedor: ' || orden_reg.id_proveedor || 
                                ', Estado: ' || orden_reg.estado_orden);
    END LOOP;
    CLOSE CursorOrdenesPendientes;
END;
/

-- Recorrer productos vendidos por cliente
DECLARE
    CURSOR CursorProductosVendidos IS
        SELECT c.id_cliente, c.nombre, r.nombre AS Producto
        FROM Clientes c
        INNER JOIN Ventas v ON c.id_cliente = v.id_cliente
        INNER JOIN Detalle_Ventas dv ON v.id_venta = dv.id_venta
        INNER JOIN Repuestos r ON dv.id_repuesto = r.id_repuesto;
    producto_reg CursorProductosVendidos%ROWTYPE;
BEGIN
    OPEN CursorProductosVendidos;
    LOOP
        FETCH CursorProductosVendidos INTO producto_reg;
        EXIT WHEN CursorProductosVendidos%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE('Cliente: ' || producto_reg.nombre || 
                                ', Producto: ' || producto_reg.producto);
    END LOOP;
    CLOSE CursorProductosVendidos;
END;
/


-- Generar reporte de ventas por cliente
DECLARE
    CURSOR CursorVentasPorCliente IS
        SELECT c.id_cliente, c.nombre, SUM(v.total_venta) AS TotalGastado
        FROM Clientes c
        INNER JOIN Ventas v ON c.id_cliente = v.id_cliente
        GROUP BY c.id_cliente, c.nombre;
    ventas_cliente_reg CursorVentasPorCliente%ROWTYPE;
BEGIN
    OPEN CursorVentasPorCliente;
    LOOP
        FETCH CursorVentasPorCliente INTO ventas_cliente_reg;
        EXIT WHEN CursorVentasPorCliente%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE('Cliente: ' || ventas_cliente_reg.nombre || 
                                ', Total Gastado: ' || ventas_cliente_reg.TotalGastado);
    END LOOP;
    CLOSE CursorVentasPorCliente;
END;
/